Tipos de dados

    Um valor em JavaScript é sempre de um determinado tipo. Por exemplo, uma string ou um número.

    Existem oito tipos básicos de dados em JavaScript. Aqui, vamos abordá-los de forma geral e nos próximos capítulos falaremos sobre cada um deles em detalhes.

    Podemos colocar qualquer tipo em uma variável. Por exemplo, uma variável pode em um momento armazenar uma string e depois um número:

        let message = "Hello world";

        message = 123456;

    Linguagens de programação que permitem tais coisas, como JavaScript, são chamadas de "digitadas dinamicamente", o que significa que existem tipos de dados, mas variáveis não estão vinculadas a nenhum deles.

    Numero:

        O tipo número representa números inteiros e de ponto flutuante:

            let n = 123;

            n = 12.3334;

        Existem muitas operações para numeros, por exemplo, multiplicação "*", divisão "/", adição "+", subtração "-" e assim por diante.

        Além dos números regulares, existem os chamados "valores númericos especiais" que também pertecem a este tipo de dados: "Infinity", "-Infinity" e "NaN".

            Infinity:

                Representa o "infinito"(1) matemático ∞. É um valor especial que é maior do que qualquer número.

                (1) - https://en.wikipedia.org/wiki/Infinity

                Podemos obtê-lo como resultado da divisão por zero:

                    alert(1 / 0); // Infinity

                Ou apenas referenciá-lo diretamente:

                    alert(Infinity); // Infinity

            NaN:

                É pegajoso. Qualquer outra operação matemática envolvendo um "NaN" vai retornar "NaN":

                    alert(NaN + 1); // NaN

                    alert(3 * NaN); // NaN

                    alert("olá" / 2 - 1); // NaN

                Portanto, se houver um "NaN" em algum lugar em uma expressão matemática, ele se propaga para todo o resultado(só há um exceção: NaN ** 0 é 1)

                NOTA:

                    As operações matemáticas são seguras:

                        Fazer matemática é "seguro" em JavaScript. Podemos fazer qualquer coisa: dividir por zero, tratar strings não numéricas como números, etc.

                        O script nunca irá parar para com um erro fatal("morrer"). Na pior das hipóteses, obteremos um "NaN" como resultado.

        Valores numéricos especiais formalmente pertencem ao tipo "numérico". Claro que não não números no sentido comum desta palavra.

        Veremos mais sobre como trabalhar com números no capítulo "Numeros"(1).

        (1) - https://javascript.info/number

        BigInt:

            Em JavaScript, tipo "número" não pode representar com segurança valores inteiro maiores que (2 ** 53 - 1 == 9007199254740991) ou -(2 ** 53 - 1 == -9007199254740991) para negativos.

            Para ser realmente preciso, o tipo "número" pode armazenar números inteiros maiores (1.7976931348623157 * 10 ** 308), mas fora do intervalo seguro de inteiros(±(2 ** 53 - 1)) haverá um erro de precisão, porque nem todos os dígitos cabem no armazenamento fixo de 64bits. Portanto, um valor "aproximado" pode ser armazenado.

            Por exemplo, esses dois números(logo acima da faixa segura) são os mesmos:

                console.log(9007199254740991 + 1); // 9007199254740992
                console.log(9007199254740991 + 2); // 9007199254740992

            Por assim dizer, todos os inteiros ímpares maiores que (2 ** 53 - 1) não podem ser armazenados no tipo "número".

            Para a maioria das finalidades, o alcance (2 ** 53 - 1) é suficiente, mas às vezes precisamos de todo o intervalo de números inteiros realmente grandes, por exemplo, para criptografia ou carimbos de data/hora com precisão de microsegundos.

            o type "BigInt" foi adicionado recentemente ao idioma para representar números inteiros de comprimento arbritrários.

            Um valor "BigInt" é criado anexando "n" ao final de um número inteiro:

                // the "n" at the end means it's a BigInt
                const bigInt = 1234567890123456789012345678901234567890n;

            Como os números "BigInt" são raramente necessários, não os abordamos aqui, mas dedicamos a eles um capítulo separado "BigInt"(1). Leia-o quando precisar de números grandes.

            (1) - https://javascript.info/bigint

            NOTA:

                Problema de compatibilidade:

                    No entanto, "BigInt" é suportado no Firefox/Chrome/Edge/Safari, mas não no IE.

                Você pode verificar a tabela de compatibilidade "MDN BigInt"(1) para saber quais versões de um navegador são suportadas.

                (1) - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#browser_compatibility

    String:

        Uma "string" deve estar entre aspas:

            let str1 = "Hello";

            let str2 = 'Hello';

            let str3 = `Hello`;

        Em JavaScript, existem 3 tipos de aspas:

            1 - Aspas duplas:

                "Hello"

            2 - Aspas simples:

                'Hello'

            3 -  Backticks:

                `Hello`

        As aspas duplas e simples são aspas "simples". Praticamente não há diferença entre elas em JavaScript.

        Backticks são citações de "funcionalidade estendida". Eles nos permitem incorporar variáveis e expressões em uma string envolvendo-as em "${...}", por exemplo:

            let name = "Jhon";

            alert(`Hello, ${name}`); // Hello, Jhon

            alert(`The result is ${2 + 1}`); // The result is 3

        A expressão dentro de "${...}" é válida e o resultado torna-se parte da string. Podemos colocar qualquer coisa lá: uma variável como "name" ou uma expressão aritmética ou algo mais complexo.

        Observe que isso só pode ser feito em backticks. Outras citações não têm essa funcionalidade de incorporação.

            alert('The result is ${1 + 2}'); // The result is ${1 + 2}

        Abordaremos as strings com mais detalhes no capítulo "String"(1).

        (1) - https://javascript.info/string

        NOTA:

            Não há nenhum tipo para um único caractere:

                Em algumas linguagens, existe um tipo expecccial de "caracter" para um único caractere. Por exemplo, na linguagem C e Java é chamado de "char".

                Em JavaScript, não existe esse tipo. Só existe um tipo: "string". Uma string pode consistir em zero caracteres(estar vazio), um caractere ou muitos deles.

    Boleano(tipo lógico):

        O tipo boleano tem apenas dois valores: "true" e "false".

        Esse tipo é comumente usado para armazenar valores sim/não:

            true:

                Significa "sim/correto"

            false:

                Significa "não/incorreto"

        Por exemplo:

            let checked = true;

            let notChecked = false;

        Valores boleanos também vêm como resultado de comparações:

            let isGreater = 4 > 1; // true

        Abordaremos os boleanos mais profundamente no capítulo "Operadores lógicos".

    O valor "nulo"(null):

        O valor especial "null" não pertence a nenhum dos tipos descritos acima.

        Ele forma um tipo separado próprio que contém apenas o valor "null":

            let age = null;

        Em JavaScript, "null" não é uma "referência a um objeto inexistente" ou um "ponteiro nulo" como em algumas linguagens.

        É apenas um valor especial que representa "nada", "vazio" ou "valor desconhecido".

        O código acima afirma que "age" é desconhecido;

    O valor "indefinido"(undefined):

        O valor especial "undefined" também se destaca. Ele cria um tipo próprio, assim como "null".

        O significado de 'undefine' é 'valor não atribuido'.

        Se uma variável for declarada, mas não atribuída, seu valor será "undefined":

            let age; // undefined

        Tecnicamente, é possível atribuir explicitamente 'undefine' a uma variável:

            let age = undefined;

        Mas não é recomendado fazer isso. Normalmente, é usado "null" para atribuir um valor 'vazio' ou 'desconhecido' a uma variável, enquanto 'undefined' é reservado como um valor inicial padrão para coisas não atribuídas.

    Objetos e Símbolos:

        O tipo "object" é especial.

        Todos os atributos são chamados de 'primitivos' porque seu valores podem contem apenas um única coisa(seja uma string, nnúmero ou qualquer outra coisa). Em contraste, os objetos são usados para armazenar coleções de dados e entidades mais complexas.

        Por serem tão importantes, os objetos merecem um tratamento especial. Trataremos deles mais adiante no capítulo 'Objetos', depois de aprendermos mais sobre primitivas.

        O tipo 'symbol' é usado para criar identificadores exclusivos para objetos. Temos que mencioná-lo aqui por  uma questão de completude, mas também adiar os detalhes até que conheçamos os objetos.

    O operador "typeof":

        O operador "typeof" retorna o tipo do operando. É útil quando queremos processar valores de diferentes tipos de forma diferente ou apenas queremos fazer um verificação rápida.

        Uma chamada para "typeof" retorna uma string com o nome do tipo:

            typeof undefined; // 'undefined'

            typeof 0; // 'number'

            typeof 1n; // 'bigint'

            typeof true; // 'boolean'

            typeof null; // 'object'

            typeof Math; // 'object'

            typeof alert; // 'function'